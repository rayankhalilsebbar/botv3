// grid-strategy.js
class GridStrategy {
  constructor(config, orderService, wsClient) {
    this.config = config;
    this.orderService = orderService;
    this.wsClient = wsClient;
    
    this.running = false;
    this.updateInterval = null;
    this.isUpdating = false;  // Verrou pour updateGrid
    this.isPlacingOrders = false;  // NOUVEAU: Verrou pour les op√©rations de placement d'ordres
    this.lastProcessedPrice = null;
    this.lastGridUpdateTime = null;
    this.lastBasePrice = null;
    
    // NOUVELLE PROPRI√âT√â: Ensemble des prix o√π un ordre de vente vient d'√™tre plac√© au niveau sup√©rieur
    this.recentlyPlacedSellLevels = new Set();
    
    // NOUVELLE PROPRI√âT√â: File d'attente pour les mises √† jour de grille
    this.gridUpdateQueue = [];
    this.isProcessingQueue = false;
    
    // NOUVELLE PROPRI√âT√â: Compteur pour suivre les ordres en cours de placement
    this.pendingOrdersCount = 0;
    
    // √âcouteurs d'√©v√©nements li√©s √† la strat√©gie
    this.setupEventListeners();
  }
  
  // NOUVELLE M√âTHODE: V√©rifier si nous pouvons placer de nouveaux ordres sans d√©passer la limite
  canPlaceNewOrders(count = 1) {
    const activeBuyOrders = this.orderService.getActiveBuyOrders();
    const activeSellOrders = this.orderService.getActiveSellOrders();
    const totalActiveOrders = activeBuyOrders.length + activeSellOrders.length;
    
    // V√©rifier si l'ajout de nouveaux ordres d√©passerait la limite
    const wouldExceedLimit = (totalActiveOrders + this.pendingOrdersCount + count) > this.config.maxOrders;
    
    if (wouldExceedLimit) {
      // console.log(`‚ö†Ô∏è Limite d'ordres atteinte: ${totalActiveOrders}/${this.config.maxOrders} ordres actifs + ${this.pendingOrdersCount} en attente`);
      return false;
    }
    
    return true;
  }
  
  // NOUVELLE M√âTHODE: Incr√©menter le compteur d'ordres en attente
  incrementPendingOrders(count = 1) {
    this.pendingOrdersCount += count;
    console.log(`üìä Ordres en attente: ${this.pendingOrdersCount}`);
  }
  
  // NOUVELLE M√âTHODE: D√©cr√©menter le compteur d'ordres en attente
  decrementPendingOrders(count = 1) {
    this.pendingOrdersCount = Math.max(0, this.pendingOrdersCount - count);
    console.log(`üìä Ordres en attente: ${this.pendingOrdersCount}`);
  }
  
  setupEventListeners() {
    // Mise √† jour du prix
    this.wsClient.on('price_update', (price) => {
      // Simplement stocker le nouveau prix, l'intervalle s'occupera de la mise √† jour
      this.lastProcessedPrice = price;
    });
    
    // Ex√©cution d'un ordre d'achat - d√©j√† g√©r√© par OrderService qui place l'ordre de vente
    this.wsClient.on('strategy_buy_filled', (data) => {
      console.log(`üìà Strat√©gie: Achat ex√©cut√© √† ${data.price}$, ordre de vente plac√© √† ${data.sellPrice}$`);
      
      // NOUVEAU: D√©cr√©menter le compteur d'ordres en attente
      this.decrementPendingOrders();
      
      // NOUVEAU CODE: Ajouter le prix d'achat √† la liste des prix verrouill√©s
      // (car un ordre de vente vient d'√™tre plac√© au niveau sup√©rieur)
      this.recentlyPlacedSellLevels.add(data.price);
      
      // Lib√©rer ce prix apr√®s un d√©lai √©gal √† l'intervalle de mise √† jour
      setTimeout(() => {
        this.recentlyPlacedSellLevels.delete(data.price);
      }, 1001); // Exactement l'intervalle de mise √† jour de la grille
    });
    
    // Ex√©cution d'un ordre de vente - modification pour ne plus afficher le prix d'achat puisqu'il n'est plus plac√© automatiquement
    this.wsClient.on('strategy_sell_filled', (data) => {
      console.log(`üìâ Strat√©gie: Vente ex√©cut√©e √† ${data.price}$`);
      
      // NOUVEAU: D√©cr√©menter le compteur d'ordres en attente
      this.decrementPendingOrders();
      
      // NOUVELLE MODIFICATION: Supprimer le prix de vente de recentlyPlacedSellLevels
      this.recentlyPlacedSellLevels.delete(data.price);
      
      // NOUVELLE MODIFICATION: D√©clencher updateGrid() apr√®s chaque vente pour maintenir la grille compl√®te
      setTimeout(() => {
        console.log(`üîÑ Mise √† jour de la grille d√©clench√©e apr√®s vente √† ${data.price}$`);
        // NOUVEAU: Ajouter √† la file d'attente au lieu d'appeler directement
        this.queueGridUpdate('force');
      }, 100); // Petit d√©lai pour laisser le temps √† l'ordre d'√™tre retir√© des listes actives
    });
    
    // NOUVEAU: Ajouter un √©couteur pour les ordres annul√©s
    this.wsClient.on('order_cancelled', (data) => {
      console.log(`üö´ Strat√©gie: Ordre annul√© √† ${data.price}$`);
      
      // D√©cr√©menter le compteur d'ordres en attente
      this.decrementPendingOrders();
    });
    
    // NOUVEAU: Ajouter un √©couteur pour les ordres qui deviennent actifs
    this.wsClient.on('order_update', (data) => {
      // Si l'ordre est nouveau (status: 'new'), c'est qu'il vient d'√™tre plac√© et est maintenant actif
      if (data.status === 'new') {
        // D√©cr√©menter le compteur d'ordres en attente car l'ordre est maintenant actif
        this.decrementPendingOrders();
      }
    });
    
    // NOUVEAU: Ajouter un √©couteur pour les ordres nettoy√©s par le service d'ordres
    this.wsClient.on('order_cleanup', (data) => {
      console.log(`üßπ Strat√©gie: Ordre nettoy√© √† ${data.price}$ (${data.side}) - Raison: ${data.reason}`);
      
      // D√©cr√©menter le compteur d'ordres en attente
      this.decrementPendingOrders();
      
      // Si c'est un ordre de vente, supprimer le prix de recentlyPlacedSellLevels
      if (data.side === 'sell') {
        this.recentlyPlacedSellLevels.delete(data.price);
      }
    });
  }
  
  // NOUVELLE M√âTHODE: Ajouter une mise √† jour √† la file d'attente
  queueGridUpdate(type = 'normal') {
    // console.log(`üìã Ajout d'une mise √† jour de grille √† la file d'attente (type: ${type})`);
    this.gridUpdateQueue.push(type);
    
    // Traiter la file d'attente si elle n'est pas d√©j√† en cours de traitement
    if (!this.isProcessingQueue) {
      this.processGridUpdateQueue();
    }
  }
  
  // NOUVELLE M√âTHODE: Traiter la file d'attente des mises √† jour de grille
  async processGridUpdateQueue() {
    if (this.isProcessingQueue || this.gridUpdateQueue.length === 0) return;
    
    this.isProcessingQueue = true;
    
    try {
      while (this.gridUpdateQueue.length > 0) {
        const updateType = this.gridUpdateQueue.shift();
        
        // Attendre que les op√©rations de placement d'ordres soient termin√©es
        if (this.isPlacingOrders) {
          console.log(`‚è≥ Attente de la fin des op√©rations de placement d'ordres avant de traiter la mise √† jour de grille...`);
          await new Promise(resolve => {
            const checkInterval = setInterval(() => {
              if (!this.isPlacingOrders) {
                clearInterval(checkInterval);
                resolve();
              }
            }, 100);
          });
        }
        
        // Ex√©cuter la mise √† jour appropri√©e
        if (updateType === 'force') {
          await this.forceUpdateGrid();
        } else {
          await this.updateGrid();
        }
        
        // Petit d√©lai entre les mises √† jour pour √©viter les surcharges
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement de la file d\'attente des mises √† jour de grille:', error);
    } finally {
      this.isProcessingQueue = false;
    }
  }
  
  // Nouvelle m√©thode pour forcer la mise √† jour de la grille sans v√©rifier si le prix a chang√©
  async forceUpdateGrid() {
    if (!this.running) return;
    
    // V√©rifier si des ordres sont en cours de placement
    if (this.isPlacingOrders) {
      console.log(`‚è≥ Mise √† jour forc√©e de la grille report√©e: des ordres sont en cours de placement`);
      return;
    }
    
    const currentPrice = this.wsClient.getCurrentPrice();
    if (!currentPrice) {
      console.log('‚ö†Ô∏è Impossible de mettre √† jour la grille: prix actuel non disponible');
      return;
    }
    
    // Calculer le prix de base actuel
    const currentBasePrice = Math.floor(currentPrice / this.config.priceStep) * this.config.priceStep;
    
    console.log(`üîÑ Mise √† jour forc√©e de la grille - Prix actuel: ${currentPrice}$ (base: ${currentBasePrice}$)`);
    
    // Ajuster la grille
    await this.adjustGridUpwards(currentBasePrice);
    
    // M√©moriser le nouveau prix de base si n√©cessaire
    if (currentBasePrice > this.lastBasePrice) {
      this.lastBasePrice = currentBasePrice;
    }
    
    // Mettre √† jour l'horodatage de la derni√®re mise √† jour
    this.lastGridUpdateTime = Date.now();
    this.lastProcessedPrice = currentPrice;
  }
  
  // Nouvelle m√©thode updateGrid unifi√©e
  async updateGrid() {
    if (!this.running) return;
    if (this.isUpdating) return;  // Protection contre les ex√©cutions simultan√©es
    
    this.isUpdating = true;
    
    try {
      // V√©rifier si des ordres sont en cours de placement
      if (this.isPlacingOrders) {
        // console.log(`‚è≥ Mise √† jour de la grille report√©e: des ordres sont en cours de placement`);
        return;
      }
      
      const currentPrice = this.wsClient.getCurrentPrice();
      if (!currentPrice) {
        console.log('‚ö†Ô∏è Impossible de mettre √† jour la grille: prix actuel non disponible');
        return;
      }
  
      // 1. Calculer le prix de base actuel
      const currentBasePrice = Math.floor(currentPrice / this.config.priceStep) * this.config.priceStep;
  
      // 2. Ajuster la grille vers le haut si n√©cessaire - UNIQUEMENT SI LE PRIX DE BASE A AUGMENT√â
      // Comportement de BitGet: ne pas r√©agir aux baisses de prix, seulement aux hausses
      if (this.lastBasePrice && currentBasePrice > this.lastBasePrice) {
        console.log(`üìà Le prix est mont√© - Prix actuel: ${currentPrice}$ (base: ${currentBasePrice}$ > derni√®re base: ${this.lastBasePrice}$)`);
        
        // Obtenir les ordres actifs
        const activeBuyOrders = this.orderService.getActiveBuyOrders();
        
        // G√©n√©rer la nouvelle grille id√©ale
        const newGrid = this.generateGrid(currentPrice);
        
        // Identifier les ordres √† annuler (trop bas)
        const ordersToCancel = [];
        const existingPrices = new Set();
        
        for (const order of activeBuyOrders) {
          existingPrices.add(order.price);
          if (!newGrid.includes(order.price)) {
            ordersToCancel.push(order.clientOid);
          }
        }
  
        // Identifier les nouveaux prix √† ajouter avec v√©rification des ordres de vente
        const newPricesToAdd = newGrid.filter(price => {
          // V√©rifie qu'il n'y a pas d√©j√† un ordre d'achat √† ce prix
          if (existingPrices.has(price)) {
            return false;
          }
          
          // NOUVELLE V√âRIFICATION: Ignorer les prix o√π un ordre de vente vient d'√™tre plac√© au niveau sup√©rieur
          if (this.recentlyPlacedSellLevels.has(price)) {
            console.log(`‚ö†Ô∏è Prix ${price}$ ignor√© car un ordre de vente vient d'√™tre plac√© au niveau sup√©rieur`);
            return false;
          }
          
          // V√©rifie qu'il n'y a pas d'ordre de vente au niveau sup√©rieur
          const sellPriceLevel = parseFloat((price + this.config.priceStep).toFixed(this.config.pricePrecision));
          if (this.orderService.hasSellOrderAtPrice(sellPriceLevel)) {
            return false;
          }
          
          return true;
        });
        
        // NOUVELLE V√âRIFICATION: S'assurer que nous ne d√©passons pas la limite d'ordres
        if (newPricesToAdd.length > 0 && !this.canPlaceNewOrders(newPricesToAdd.length)) {
          // console.log(`‚ö†Ô∏è Limite d'ordres atteinte, annulation uniquement des ordres obsol√®tes`);
          
          // Annuler uniquement les ordres obsol√®tes sans en ajouter de nouveaux
          if (ordersToCancel.length > 0) {
            console.log(`‚ùå Annulation de ${ordersToCancel.length} ordres trop √©loign√©s de la nouvelle grille`);
            await this.orderService.cancelBulkOrders(ordersToCancel);
          }
        } else {
          // Appliquer les changements
          if (ordersToCancel.length > 0) {
            console.log(`‚ùå Annulation de ${ordersToCancel.length} ordres trop √©loign√©s de la nouvelle grille`);
            await this.orderService.cancelBulkOrders(ordersToCancel);
          }
  
          if (newPricesToAdd.length > 0) {
            console.log(`üìà Ajout de ${newPricesToAdd.length} nouveaux niveaux de prix √† la grille`);
            const newOrdersData = newPricesToAdd.map(price => ({
              price,
              size: this.orderService.calculateOrderSize(price)
            }));
            
            // NOUVEAU: Utiliser le verrou pour les op√©rations de placement d'ordres
            this.isPlacingOrders = true;
            try {
              // NOUVEAU: Incr√©menter le compteur d'ordres en attente
              this.incrementPendingOrders(newOrdersData.length);
              
              await this.orderService.placeBulkOrders(newOrdersData, 'buy');
            } finally {
              this.isPlacingOrders = false;
            }
          }
        }
  
        this.lastBasePrice = currentBasePrice;
      }
  
      // 3. Combler les trous dans la grille existante
      const activeBuyOrders = this.orderService.getActiveBuyOrders();
      const idealGrid = this.generateGrid(currentPrice);
      
      // Identifier les trous avec v√©rification des ordres de vente
      const existingPrices = new Set(activeBuyOrders.map(order => order.price));
      const holes = idealGrid
        .filter(price => {
          // V√©rifie qu'il n'y a pas d√©j√† un ordre d'achat √† ce prix
          if (existingPrices.has(price)) {
            return false;
          }
          
          // NOUVELLE V√âRIFICATION: Ignorer les prix o√π un ordre de vente vient d'√™tre plac√© au niveau sup√©rieur
          if (this.recentlyPlacedSellLevels.has(price)) {
            console.log(`‚ö†Ô∏è Trou ignor√© au prix ${price}$ car un ordre de vente vient d'√™tre plac√© au niveau sup√©rieur`);
            return false;
          }
          
          // V√©rifie qu'il n'y a pas d'ordre de vente au niveau sup√©rieur
          const sellPriceLevel = parseFloat((price + this.config.priceStep).toFixed(this.config.pricePrecision));
          if (this.orderService.hasSellOrderAtPrice(sellPriceLevel)) {
            return false;
          }
          
          return true;
        })
        .map(price => ({
          price,
          distanceFromCurrent: Math.abs(currentPrice - price)
        }))
        .sort((a, b) => a.distanceFromCurrent - b.distanceFromCurrent);
  
      // V√©rifier si nous avons atteint la limite d'ordres
      const activeSellOrders = this.orderService.getActiveSellOrders();
      const totalActiveOrders = activeBuyOrders.length + activeSellOrders.length;
      const canAddWithoutCancelling = totalActiveOrders < this.config.maxOrders;
  
      // NOUVELLE V√âRIFICATION: S'assurer que nous ne d√©passons pas la limite d'ordres
      if (holes.length > 0 && !this.canPlaceNewOrders(holes.length)) {
        // console.log(`‚ö†Ô∏è Limite d'ordres atteinte, impossible de combler les trous`);
      } else if (canAddWithoutCancelling && holes.length > 0) {
        // Si on n'a pas atteint la limite, simplement ajouter des ordres pour les trous
        // Limiter le nombre de nouveaux ordres √† placer
        const holesToFill = holes.slice(0, this.config.maxOrders - totalActiveOrders);
        
        if (holesToFill.length > 0) {
          console.log(`üìà Ajout de ${holesToFill.length} nouveaux niveaux pour combler les trous`);
          
          const newOrdersData = holesToFill.map(hole => ({
            price: hole.price,
            size: this.orderService.calculateOrderSize(hole.price)
          }));
          
          // NOUVEAU: Utiliser le verrou pour les op√©rations de placement d'ordres
          this.isPlacingOrders = true;
          try {
            // NOUVEAU: Incr√©menter le compteur d'ordres en attente
            this.incrementPendingOrders(newOrdersData.length);
            
            await this.orderService.placeBulkOrders(newOrdersData, 'buy');
          } finally {
            this.isPlacingOrders = false;
          }
        }
      } else if (holes.length > 0) {
        // Si on a atteint la limite, on va d√©placer des ordres comme dans BitGet
        // en annulant et pla√ßant dans le m√™me cycle
        
        // Limiter le nombre de trous √† combler
        const maxHolesToFill = Math.min(holes.length, 20); // Limiter √† 20 pour permettre un remplissage rapide de la grille
        const holesToFill = holes.slice(0, maxHolesToFill);
        
        if (holesToFill.length > 0) {
          // Comme dans BitGet, on va garder une correspondance directe entre ordres annul√©s et prix √† remplir
          const movableOrders = activeBuyOrders
            .map(order => ({
              order,
              distanceFromCurrent: Math.abs(currentPrice - order.price)
            }))
            .sort((a, b) => b.distanceFromCurrent - a.distanceFromCurrent); // Les plus √©loign√©s d'abord
          
          // Combler les trous en d√©pla√ßant des ordres (comme BitGet)
          const holeOrdersToCancel = [];
          const newHoleOrdersToPlace = [];
          
          for (const hole of holesToFill) {
            if (movableOrders.length === 0) break;
            
            const farOrder = movableOrders[0];
            if (farOrder.distanceFromCurrent > hole.distanceFromCurrent) {
              holeOrdersToCancel.push(farOrder.order.clientOid);
              newHoleOrdersToPlace.push(hole.price);
              movableOrders.shift();
            }
          }
          
          // Appliquer les changements pour les trous
          if (holeOrdersToCancel.length > 0) {
            console.log(`üîÑ Optimisation: D√©placement de ${holeOrdersToCancel.length} ordres pour combler les trous`);
            
            // NOUVEAU: Utiliser le verrou pour les op√©rations de placement d'ordres
            this.isPlacingOrders = true;
            try {
              // NOUVEAU: Incr√©menter le compteur d'ordres en attente
              this.incrementPendingOrders(newHoleOrdersToPlace.length);
              
              await this.orderService.cancelBulkOrders(holeOrdersToCancel);
              
              // Placer imm√©diatement les nouveaux ordres (comme BitGet)
              const newOrdersData = newHoleOrdersToPlace.map(price => ({
                price,
                size: this.orderService.calculateOrderSize(price)
              }));
              
              await this.orderService.placeBulkOrders(newOrdersData, 'buy');
            } finally {
              this.isPlacingOrders = false;
            }
          }
        }
      }
  
      // Mettre √† jour l'horodatage de la derni√®re mise √† jour
      this.lastGridUpdateTime = Date.now();
      this.lastProcessedPrice = currentPrice;
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de la grille:', error);
    } finally {
      this.isUpdating = false;
    }
  }
  
  start() {
    if (this.running) {
      console.log('‚ö†Ô∏è La strat√©gie est d√©j√† en cours d\'ex√©cution');
      return;
    }
    
    console.log('üöÄ D√©marrage de la strat√©gie de grille');
    this.running = true;
    
    // Initialiser le prix de base
    const currentPrice = this.wsClient.getCurrentPrice();
    if (!currentPrice) {
      console.error('‚ùå Impossible de d√©marrer la strat√©gie: prix actuel non disponible');
      this.running = false;
      return;
    }
    
    // Initialiser la grille
    this.lastBasePrice = Math.floor(currentPrice / this.config.priceStep) * this.config.priceStep;
    console.log(`üî¢ Prix de base initial: ${this.lastBasePrice}$`);
    
    // Configurer l'intervalle de mise √† jour
    this.updateInterval = setInterval(() => {
      // NOUVEAU: Ajouter √† la file d'attente au lieu d'appeler directement
      this.queueGridUpdate('normal');
    }, this.config.strategy.updateInterval);
    
    // D√©clencher une premi√®re mise √† jour imm√©diate
    this.queueGridUpdate('normal');
  }
  
  stop() {
    if (!this.running) {
      console.log('‚ö†Ô∏è La strat√©gie n\'est pas en cours d\'ex√©cution');
      return;
    }
    
    console.log('üõë Arr√™t de la strat√©gie de grille');
    this.running = false;
    
    // Nettoyer l'intervalle
    if (this.updateInterval) {
      clearInterval(this.updateInterval);
      this.updateInterval = null;
    }
  }
  
  generateGrid(currentPrice) {
    const grid = [];
    const basePrice = Math.floor(currentPrice / this.config.priceStep) * this.config.priceStep;
    
    // G√©n√©rer la grille pour le nombre total d'ordres configur√© (sans division par 2)
    for (let i = 0; i < this.config.maxOrders; i++) {
      const price = basePrice - i * this.config.priceStep;
      if (price > 0) {
        grid.push(parseFloat(price.toFixed(this.config.pricePrecision)));
      }
    }
    
    return grid;
  }
  
  logGridStatus() {
    if (!this.running) {
      console.log('‚ö†Ô∏è La strat√©gie n\'est pas en cours d\'ex√©cution');
      return;
    }
    
    const currentPrice = this.wsClient.getCurrentPrice();
    if (!currentPrice) {
      console.error('‚ùå Impossible d\'afficher le statut: prix actuel non disponible');
      return;
    }
    
    const activeBuyOrders = this.orderService.getActiveBuyOrders();
    const activeSellOrders = this.orderService.getActiveSellOrders();
    
    console.log('\n=== STATUT DE LA GRILLE ===');
    console.log(`Prix actuel: ${currentPrice}$`);
    console.log(`Ordres d'achat actifs: ${activeBuyOrders.length}`);
    console.log(`Ordres de vente actifs: ${activeSellOrders.length}`);
    console.log(`Total des ordres: ${activeBuyOrders.length + activeSellOrders.length}/${this.config.maxOrders}`);
    console.log(`Ordres en attente: ${this.pendingOrdersCount}`);
    console.log('========================\n');
  }
  
  // M√©thode pour ajuster la grille vers le haut
  async adjustGridUpwards(currentBasePrice) {
    // Obtenir les ordres actuels
    const activeBuyOrders = this.orderService.getActiveBuyOrders();
    const activeSellOrders = this.orderService.getActiveSellOrders();
    const currentPrice = this.wsClient.getCurrentPrice();
    
    // G√©n√©rer la nouvelle grille id√©ale
    const newGrid = this.generateGrid(currentBasePrice);
    
    console.log(`üìä Ajustement de la grille - Base: ${currentBasePrice}$, ${newGrid.length} niveaux g√©n√©r√©s`);
    
    // 1. Identifier les ordres d'achat √† annuler (ceux qui ne font plus partie de la grille id√©ale)
    const buyOrdersToCancel = activeBuyOrders
      .filter(order => !newGrid.includes(order.price))
      .map(order => order.clientOid);
    
    // 2. Identifier les prix manquants dans la grille
    const existingBuyPrices = new Set(activeBuyOrders.map(order => order.price));
    const existingSellPrices = new Set(activeSellOrders.map(order => order.price));
    
    // 3. Nouveaux niveaux de prix √† ajouter avec v√©rification des ordres de vente
    const newPricesToAdd = newGrid
      .filter(price => {
        // V√©rifie qu'il n'y a pas d√©j√† un ordre d'achat √† ce prix
        if (existingBuyPrices.has(price)) {
          return false;
        }
        
        // NOUVELLE V√âRIFICATION: Ignorer les prix o√π un ordre de vente vient d'√™tre plac√© au niveau sup√©rieur
        if (this.recentlyPlacedSellLevels.has(price)) {
          console.log(`‚ö†Ô∏è Prix ${price}$ ignor√© dans adjustGridUpwards car un ordre de vente vient d'√™tre plac√© au niveau sup√©rieur`);
          return false;
        }
        
        // V√©rifie qu'il n'y a pas d'ordre de vente au niveau sup√©rieur
        const sellPriceLevel = parseFloat((price + this.config.priceStep).toFixed(this.config.pricePrecision));
        if (existingSellPrices.has(sellPriceLevel)) {
          return false;
        }
        
        return true;
      });
    
    // 4. Appliquer les changements
    
    // 4.1 Annuler les ordres
    if (buyOrdersToCancel.length > 0) {
      console.log(`‚ùå Annulation de ${buyOrdersToCancel.length} ordres d'achat obsol√®tes`);
      
      // NOUVEAU: Utiliser le verrou pour les op√©rations de placement d'ordres
      this.isPlacingOrders = true;
      try {
        await this.orderService.cancelBulkOrders(buyOrdersToCancel);
      } finally {
        this.isPlacingOrders = false;
      }
    }
    
    // 4.2 Ajouter de nouveaux ordres d'achat
    if (newPricesToAdd.length > 0) {
      // V√©rifier si nous avons d√©pass√© la limite d'ordres
      const totalActiveOrders = activeBuyOrders.length + activeSellOrders.length - buyOrdersToCancel.length;
      const availableSlots = this.config.maxOrders - totalActiveOrders;
      
      // Limiter le nombre de nouveaux ordres si n√©cessaire
      const pricesToAdd = newPricesToAdd.slice(0, availableSlots);
      
      // NOUVELLE V√âRIFICATION: S'assurer que nous ne d√©passons pas la limite d'ordres
      if (pricesToAdd.length > 0 && !this.canPlaceNewOrders(pricesToAdd.length)) {
        // console.log(`‚ö†Ô∏è Limite d'ordres atteinte, impossible d'ajouter de nouveaux ordres`);
      } else if (pricesToAdd.length > 0) {
        console.log(`üìà Ajout de ${pricesToAdd.length} nouveaux niveaux de prix √† la grille`);
        const newOrdersData = pricesToAdd.map(price => ({
          price,
          size: this.orderService.calculateOrderSize(price)
        }));
        
        // NOUVEAU: Utiliser le verrou pour les op√©rations de placement d'ordres
        this.isPlacingOrders = true;
        try {
          // NOUVEAU: Incr√©menter le compteur d'ordres en attente
          this.incrementPendingOrders(newOrdersData.length);
          
          await this.orderService.placeBulkOrders(newOrdersData, 'buy');
        } finally {
          this.isPlacingOrders = false;
        }
      }
    }
  }
}

module.exports = GridStrategy; 
